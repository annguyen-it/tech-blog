# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["prod"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  cypress-run:
    needs: setup
    runs-on: self-hosted
    steps:
      - name: Cypress run 
        uses: cypress-io/github-action@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: npm-${{ hashFiles('**/package-lock.json') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: npm-
          build: npm run build
          start: npm start
        env:
          CYPRESS_GITHUB_USER: ${{ secrets.CYPRESS_GITHUB_USER }}
          CYPRESS_GITHUB_PW: ${{ secrets.CYPRESS_GITHUB_PW }}
          CYPRESS_FACEBOOK_USER: ${{ secrets.CYPRESS_FACEBOOK_USER }}
          CYPRESS_FACEBOOK_PW: ${{ secrets.CYPRESS_FACEBOOK_PW }}
          CYPRESS_COOKIE_NAME: ${{ secrets.CYPRESS_COOKIE_NAME }}
          CYPRESS_SITE_NAME: ${{ secrets.CYPRESS_SITE_NAME }}
          AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
          FACEBOOK_ID: ${{ secrets.FACEBOOK_ID }}
          FACEBOOK_SECRET: ${{ secrets.FACEBOOK_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

  build:
    needs: [setup, cypress-run]
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: npm-${{ hashFiles('**/package-lock.json') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: npm-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Static HTML export with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next export

  # Deployment job
  #deploy:
  #  environment:
  #    name: github-pages
  #    url: ${{ steps.deployment.outputs.page_url }}
  #  runs-on: ubuntu-latest
  #  needs: build
  #  steps:
  #    - name: Deploy to GitHub Pages
  #      id: deployment
  #      uses: actions/deploy-pages@v1
